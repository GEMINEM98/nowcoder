/*
思路：
          
        第一行：if(a[0][j]==1):F(0,j)=0
                else if(F(0,j-1)==1):F(0,j)=1
                else F(0,j)=0
        第一列：if(a[i][0]==1):F(i,0)=0
                else if(F(i-1,0)==1):F(i,0)=1
                else F(i,0)=0
                
        状态F(i,j)：从（0,0）到（i,j）路径的个数
        if(a[i][j]==0)
            F(i,j)=F(i,j-1)+F(i-1,j)
        else
            F(i,j)=0       
        
        返回值：F(row-1,col-1)

*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) 
    {
    
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> v(m,vector<int>(n,0));
        
        // 初始化第一行：
        for(int i=0;i<n;++i)
        {
            if(obstacleGrid[0][i]==0)
                v[0][i]=1;
            else break;
            
        }
        //初始化第一列：
        for(int i=0;i<m;++i)
        {
            if(obstacleGrid[i][0]==0)
                v[i][0]=1;
            else break;
        }
        
        for(int i=1;i<m;++i)
        {
            for(int j=1;j<n;++j)
            {
                if(obstacleGrid[i][j]==0)
                {
                    v[i][j]=v[i-1][j]+v[i][j-1];
                }
            }
        }
        return v[m-1][n-1];
    }
};
