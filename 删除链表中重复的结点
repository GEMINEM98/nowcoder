/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    /*
    // 方法一： 建立一个虚头结点，三个指针一起走
    ListNode* deleteDuplication(ListNode* pHead)
    {
        // 已经排好序的链表
        if(pHead==NULL)
        {
            return NULL;
        }
        
        ListNode* node=(ListNode*)malloc(sizeof(ListNode));
        node->next=pHead;
        
        ListNode* prev=node;//前驱
        ListNode* p1=pHead;//前指针
        ListNode* p2=pHead->next;//后指针
        
        while(p2!=NULL)
        {
            if(p1->val!=p2->val)
            {
                prev=p1;
                p1=p2;
                p2=p2->next;
            }
            else
            {
                while(p2!=NULL&&p2->val==p1->val)
                {
                    p2=p2->next;
                }
                prev->next=p2;
                p1=p2;
                if(p2!=NULL)
                {
                    p2=p2->next;
                }
            }
        }
        return node->next;
    }
    */
    
    //  方法二：不用虚结点，三个指针一起走
    ListNode* deleteDuplication(ListNode* pHead)
    {
        ListNode* prev=NULL;
        ListNode* p1=pHead;
        ListNode* p2=pHead->next;
        
        if(pHead==NULL)
        {
            return NULL;
        }
        
        while(p2!=NULL)
        {
            if(p1->val!=p2->val)
            {
                prev=p1;
                p1=p2;
                p2=p2->next;
            }
            else
            {
                while(p2!=NULL&&p2->val==p1->val)
                {
                    p2=p2->next;
                }
                if(prev==NULL)
                {
                    pHead=p2;
                }
                else
                {
                    prev->next=p2;
                }
                p1=p2;
                if(p2!=NULL)
                {
                     p2=p2->next;
                }
            }
        }
        return pHead;
    }
};
