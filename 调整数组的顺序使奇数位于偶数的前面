//输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。

//https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&tqId=11166&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking

class Solution {
public:
    //方案一：定义两个数组，分别放奇数和偶数，然后再把两个数组前后连接
    //方案二：前后指针，前面的指针找第一个偶数，后面的指针找这个偶数后的第一个奇数
    //       然后将两个指针之间的数据向后挪一位，再把后面指针指向的奇数放到这个偶数的位置。
    void reOrderArray(vector<int> &array) 
    {
        int cur=0;
        int next=1;
        while(next<array.size())
        {
            while((cur<array.size())&&(array[cur]%2!=0))//偶数
                ++cur;
            next=cur;
            while((next<array.size())&&(array[next]%2==0))//奇数
                ++next;
            if(next<array.size())
            {
                int i=0;
                int tmp=array[next];
                for(i=next;i>cur;--i)
                {
                    array[i]=array[i-1];
                }
                array[cur]=tmp;
                ++cur;
                ++next;
            }
        }
    }
};
