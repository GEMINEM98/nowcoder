
/*
思路：
先找到数组中的最小值min，以及元素最大和add；
按照0/1背包问题，我们可以列出如下表格：
例如：3  2  5
定义一个价值容器：
      j    0  1  2  3  4  5  6  7  8  9  10 
  i  a[i]  
  0   3    0  0  0  3  3  3  3  3  3  3  3
  1   2    0  0  2  3  3  5  5  5  5  5  5 
  2   5    0  0  2  3  3  5  5  7  8  8  10

上面表格中，每一行都是对上一行元素的覆盖更新，从后往前放，用低价值更新高价值

根据题目要求，输出

*/



class Solution {
public:
	/**
	 *	正数数组中的最小不可组成和
	 *	输入：正数数组arr
	 *	返回：正数数组中的最小不可组成和
	 */
	int getFirstUnFormedNum(vector<int> arr, int len) 
    {
        int min=arr[0];
        int add=0;
        
        for(auto& e:arr)
        {
            if(e>0)
                add+=e;
            if(e<min)
                min=e;
        }
        
        int i=0,j=0,k=0;
        vector<int> dp(add + 1, 0);
        for (i = 0; i < len; ++i)
        {
            //类似0/1背包列出表格
            for (j = add; j >= arr[i]; --j)
            {
                dp[j] = max(dp[j - arr[i]] + arr[i],dp[j]);
            }
        }
        for(k=min;k<=add;++k)  //在这段区间上寻找
        {
            if(dp[k]!=k)
                return k;
        }
        return add+1;
    }
};
