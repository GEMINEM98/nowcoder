/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
typedef struct ListNode ListNode;
class PalindromeList {
public:
     
ListNode* reverseList(ListNode* head)
{
    if(head==NULL||head->next==NULL)
    {
        return head;
    }
    else
    {
        ListNode* n1=head;
        ListNode* n2=n1->next;
        ListNode* n3=n2->next;
        head->next=NULL;
        while(n2!=NULL)
        {
            n2->next=n1;
            n1=n2;
            n2=n3;
            if(n3!=NULL)
            {
                n3=n3->next;
            }
        }
        head=n1;
        return head;
    }
}
    
    
/*
// 方法一：反转链表，与之比较
bool chkPalindrome(ListNode* A)
{
    // write code here
    ListNode* cur=A;
    ListNode* B=A;
    ListNode* cur2=reverseList(B);
    while(cur!=NULL)
    {
        if(cur->val==cur2->val)
        {
            cur=cur->next;
            cur2=cur2->next;
        }
        else return false;
    }
    if(cur==NULL)
    {
        return true;
    }
    else
    {
        return false;
    }
}
*/

// 方法二：前一半和翻转后的另一半进行比较
bool chkPalindrome(ListNode* A)
{
    int n=0;
    struct ListNode* cur=A;
    while(cur)
    {
        cur=cur->next;
        ++n;
    }
    cur=A;
    int mid=n/2;
    while(mid--)
    {
        cur=cur->next;
    }
    ListNode* head1=A;
    ListNode* head2=reverseList(cur);
    mid=n/2;
    while(mid--)
    {
        if(head1->val==head2->val)
        {
            head1=head1->next;
            head2=head2->next;
        }
        else return false;
    }
    return true;
}
};
